{"backend_state":"running","connection_file":"/projects/4da73662-513e-4b6e-b8bd-c9e85ea8cc88/.local/share/jupyter/runtime/kernel-49183947-29e8-4b96-b518-18e4ccc21a3b.json","kernel":"cv_env","kernel_error":"","kernel_state":"busy","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"Mastermind.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"560c12","input":"","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"606f29","input":"","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7137df","input":"#check if the user's guess is correct\n\n\n        \n#Otherwise, reveal which digits or numbers the user got correct - HINT: use string typecasting to determine which specific numbers are correct!","metadata":{"id":"ustwEFoqFkWO"},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7a0853","input":"# Loop until the number guessed is equal to the hidden random number\nguess=str(user_guess)\ncorrect=str(store)\ncorrect_digits=\"\"\ni=0\nwhile int(user_guess) != store:\n    user_guess = input(\"Guess the four-digit number\")\n    for int in num1[0]:\n        if guess[i]==correct[i]:\n           correct_digits +=correct[i]\n           i+=1\n    # in each loop, process the user's guess and reveal which digits or numbers the user got correct each round. ","metadata":{"id":"r7xV_F6pSiAS"},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8e31be","input":"","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a75db4","input":"","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e05f95","input":"while not check_answer(store, user_guess, tries):\n    user_guess = input(\"Guess the four-digit number\")","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"2ca804","input":"import random\n\nstore = random.randint(1000, 9999)\nuser_guess = input(\"Guess the four-digit number\")\ntries = 1\n\nif len(str(user_guess)) != len(str(store)):\n    print(\"ERROR: The size of the numbers must be the same\")\n    raise ValueError\n\n# Returns True if answer was correct, False if it was incorrect\ndef check_answer(correct, guessed, tries):\n    guessed_str = str(guessed)\n    correct_str = str(correct)\n    if int(correct) == int(guessed):\n        print(\"Great! You're a Mastermind!\")\n        print(f\"You guessed the answer in {tries} tries!\")\n        return True\n    else:\n        string = \"\"\n        for i in range(len(guessed_str)):\n            if guessed_str[i] == correct_str[i]:\n                string += correct_str[i]\n            else:\n                string += \"X\"\n        print(string)\n        return False\n\nwhile not check_answer(store, user_guess, tries):\n    user_guess = input(\"Guess the four-digit number again\")\n    if len(str(user_guess)) != len(str(store)):\n        print(\"ERROR: The size of the numbers must be the same\")\n        raise ValueError\n    tries += 1","kernel":"cv_env","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Guess the four-digit number"},"output_type":"stream"}}},"id":"28KLAYM7SlPC"},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Guess the four-digit number"},"value":"4567"},"1":{"name":"stdout","text":"XXXX\n"},"2":{"name":"input","opts":{"password":false,"prompt":"Guess the four-digit number again"}}},"pos":22,"start":1656467438424,"state":"busy","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"79786f","input":"#get a four digit integer between 1000 and 9999 and set it to a variable.\nimport random\n\nstore = random.randint(1000, 9999)\n","metadata":{"id":"2IAA6A4ZnLXx"},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"d4e1ab","input":"#prompt the user for input and set the guess to an integer.\nuser_guess = input(\"Guess the four-digit number\")","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Guess the four-digit number"},"output_type":"stream","value":"1243"}}},"id":"djIIncFBFQ1_"},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Guess the four-digit number"},"output_type":"stream","value":"1243"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"ebd156","input":"# Returns True if answer was correct, False if it was incorrect\n\ndef check_answer(correct, guessed):\n    guessed_str = str(guessed)\n    correct_str = str(correct)\n    if int(correct) == int(guessed):\n        print (\"Great! You're a Mastermind!\")\n        return True\n    else:\n        string = \"\"\n        for i in range(len(guessed_str)):\n            if guessed_str[i] == correct_str[i]:\n                string += correct_str[i]\n            else:\n                string += \"X\"\n        print(string)\n        print(\"You guessed it in &s)\n        return False","output":{"0":{"name":"stdout","output_type":"stream","text":"X24X\n"},"1":{"data":{"text/plain":"False"},"exec_count":19,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"32043f","input":"#start with a decimal\nmy_decimal = 150000.0\nprint(\"my_decimal:\", my_decimal)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MJ2biGAUG77u","outputId":"9b0571f0-f867-4fac-e2bf-84fec90378bb"},"output":{"0":{"name":"stdout","output_type":"stream","text":"my_decimal: 150000.0\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":59,"id":"a1b002","input":"number_of_digits = int(input(\"How many digits do you want to guess? \"))\n# Make the smallest number that has X digits by having a 1 and adding X - 1 zeros to the end\nmin_num = int(\"1\" + (\"0\" * (number_of_digits - 1)))\n# Make the largest number that has X digits by having X nines\nmax_num = int(\"9\" * number_of_digits)\n\nstore = random.randint(min_num, max_num)\nchances= int(input(\"Input the number of chances: \"))\nuser_guess = input(f\"Guess the {number_of_digits}-digit number: \")\ntries = 1\n\nif len(str(user_guess)) != len(str(store)):\n    print(\"ERROR: The size of the numbers must be the same\")\n    raise ValueError\n\n# Returns True if answer was correct, False if it was incorrect\n\ndef check_answer(correct, guessed, tries):\n    guessed_str = str(guessed)\n    correct_str = str(correct)\n    if int(correct) == int(guessed):\n        print(\"Great! You're a Mastermind!\")\n        print(f\"You guessed the answer in {tries} tries!\")\n        return True\n    else:\n        string = \"\"\n        for i in range(len(guessed_str)):\n            if guessed_str[i] == correct_str[i]:\n                string += correct_str[i]\n            else:\n                string += \"X\"\n        print(string)\n        return False\n\n# Please write some comment to help others better understand your code :)\n\nwhile not check_answer(store, user_guess, tries):\n    chances -= 1\n    if chances == 0:\n        print (f\"Game Over! Sorry, you have no more chances remaining. If you would like to play again, please restart the game. The answer was {store}.\")\n        break\n\n    print(f\"You have {chances} chance(s).\")\n    user_guess = input(f\"Guess the {number_of_digits}-digit number: \")\n    if len(str(user_guess)) != len(str(store)):\n        print(\"ERROR: The size of the numbers must be the same\")\n        raise ValueError\n    tries += 1","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"How many digits do you want to guess? "},"output_type":"stream","value":"3"},"1":{"name":"input","opts":{"password":false,"prompt":"Input the number of chances: "},"output_type":"stream","value":"4"},"2":{"name":"input","opts":{"password":false,"prompt":"Guess the 3-digit number: "},"output_type":"stream","value":"783"},"3":{"name":"input","opts":{"password":false,"prompt":"Guess the 3-digit number: "},"output_type":"stream"},"6":{"name":"input","opts":{"password":false,"prompt":"Guess the 3-digit number: "},"output_type":"stream","value":"269"},"7":{"name":"input","opts":{"password":false,"prompt":"Guess the 3-digit number: "},"output_type":"stream"}}}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"How many digits do you want to guess? "},"output_type":"stream","value":"3"},"1":{"name":"input","opts":{"password":false,"prompt":"Input the number of chances: "},"output_type":"stream","value":"4"},"2":{"name":"input","opts":{"password":false,"prompt":"Guess the 3-digit number: "},"output_type":"stream","value":"783"},"3":{"name":"input","opts":{"password":false,"prompt":"Guess the 3-digit number: "},"output_type":"stream"},"4":{"name":"stdout","output_type":"stream","text":"XXX\nYou have 3 chance(s).\n","value":"254"},"5":{"name":"stdout","output_type":"stream","text":"2XX\nYou have 2 chance(s).\n"},"6":{"name":"input","opts":{"password":false,"prompt":"Guess the 3-digit number: "},"output_type":"stream","value":"269"},"7":{"name":"input","opts":{"password":false,"prompt":"Guess the 3-digit number: "},"output_type":"stream"},"8":{"name":"stdout","output_type":"stream","text":"2XX\nYou have 1 chance(s).\n","value":"280"},"9":{"name":"stdout","output_type":"stream","text":"2XX\nGame Over! Sorry, you have no more chances remaining. If you would like to play again, please restart the game. The answer was 218.\n"}},"pos":23,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"a20674","input":"my_integer = int(my_decimal) #convert the decimal into an integer\nprint(\"my_integer:\", my_integer)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6GbIe7mMHeOz","outputId":"9cfb5b3d-61ab-4f36-a9a8-866849e6be80"},"output":{"0":{"name":"stdout","output_type":"stream","text":"my_integer: 150000\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"06ee07","input":"my_string = str(my_integer) #convert the integer into a string.\nprint(\"string_number:\", my_string)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5U_EISMqHeG0","outputId":"b527d926-d35e-4484-8707-19f6eb82e619"},"output":{"0":{"name":"stdout","output_type":"stream","text":"string_number: 150000\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"c426b5","input":"print(my_string[0], my_string[1], my_string[2], my_string[3], my_string[4], my_string[5])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VuYJEIrHHtvS","outputId":"92e67438-8377-4c41-9443-19f5ddff9a4e"},"output":{"0":{"name":"stdout","output_type":"stream","text":"1 5 0 0 0 0\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"bd2104","input":"for i in range(len(my_string)):\n      print(my_string[i])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P2n9yz-9Hd-V","outputId":"0d4f2a26-314b-4720-a4ef-6ecbcaffc2ed"},"output":{"0":{"name":"stdout","output_type":"stream","text":"1\n5\n0\n0\n0\n0\n"}},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"036ac1","input":"If you want to go further, you can find the next instructions here - https://www.geeksforgeeks.org/mastermind-game-using-python/\n\n","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"1394eb","input":"## Step 2: Get the user's guess\nThe user is now going to try to guess the 4-digit number. You should get `input()` from the user and set their guess to an integer. \n\nIf you run into issues, try to google how to get integer input from a user in python!","metadata":{"id":"yl0IqDTEEzHB"},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"1f7736","input":"## Step 1: Setting a four digit number\n\nFor this step, our program needs to set a random 4-digit number for the user to guess. It would make sense that this number is any number inbetween 1000 and 9999 right? \n\nWe recommend checking out how to get random numbers in python. Maybe a google search of \"Get a random number in a certain range python\" is a good start. You should set this number to a variable to save for later. If you are stuck, look back at our old projects\n\n","metadata":{"id":"MywCq7XjDo7z"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"2040a2","input":"The reason why strings are powerful for processing numbers digit by digit is because they can be accessed like lists.","metadata":{"id":"G823cceuHqRv"},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"2f27ec","input":"## Put it all together\n\nCombine all of your code from the previous steps below to make one smooth running program that will let a user play mastermind!\n\n","metadata":{"id":"MO1CHHGrSjHn"},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"43ecd1","input":"## Some Python Background: Typecasting & Strings\nIn this project, we will most likely use some typecasting. This is where you convert (or *cast*) a piece of data to a certain data type, such as a string or integer. Some of the code below could be useful for you on this project. ","metadata":{"id":"PyCFDcrEGhpg"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"51335a","input":"We may want to convert to different data types for processing data. Strings are one way to process numbers digit by digit.","metadata":{"id":"86uGwcGTH_Hb"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"9341ac","input":"Typecasting lets us convert a piece of data to a different data type. ","metadata":{"id":"Q3-oqvm8H6fI"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"b04aa5","input":"## Step 3: See if the user succeeds in first try\n\nIn this part, we need to check `if` the user's guess is correct and equal to the random four-digit integer the computer generated.\n\nIf the user's guess is correct, you should output something like: \n\n> \"Great! You only needed 1 try! You're a Mastermind!\"\n\nElse, then the computer hints by revealing which digits or numbers the user got correct.\n\n","metadata":{"id":"gxclhNPSFYdB"},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"c66eda","input":"## Step 4: Continue in a loop.\n\nWhen our user is wrong, we need to let them guess again and keep a `count` of how many guesses they have used so far. We will keep looping until our user's guess is equal to the hidden number.\n\nFor repetitive tasks in python, we usually use a `while` or a `for` loop. `While` loops continue executing code in a loop until a certain condition is met, and `for` loops typically are used for iterating across a piece of data. \n\n> DISCUSS: Discuss with your team and instructor which type of  loop would be better for this case.\n\n","metadata":{"id":"pSDfXUdfGD1u"},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"dc0166","input":"","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"e7576c","input":"# Welcome to **MASTERMIND**\n\nToday we will be creating Mastermind, a classic game similar to Wordle. The steps of Mastermind are as follows:\n\n*   The computer plays first by setting a 4-digit number.\n*   The user now tries their first attempt at guessing the number.\n*   If the user succeeds in their first attempt (despite odds which are highly unlikely) they win the game and is crowned Mastermind! If not, then the computer hints by revealing which digits or numbers the user got correct.\n*   The game continues till the user eventually is able to guess the number entirely.\n\n","metadata":{"id":"FIl5ePMRnNbH"},"pos":0,"type":"cell"}
{"id":0,"time":1656467337099,"type":"user"}
{"last_load":1656467337960,"type":"file"}